{"version":3,"sources":["webpack:///./src/components/template/TExpansionPanel.vue?538d","webpack:///src/components/template/TExpansionPanel.vue","webpack:///./src/components/template/TExpansionPanel.vue?037d","webpack:///../../../src/components/VExpansionPanel/VExpansionPanel.ts","webpack:///../../../src/components/VExpansionPanel/VExpansionPanelContent.ts","webpack:///../../../src/components/VExpansionPanel/VExpansionPanelHeader.ts","webpack:///../../../src/components/VExpansionPanel/VExpansionPanels.ts","webpack:///./src/components/template/TExpansionPanel.vue"],"names":["_vm","this","_h","$createElement","_c","_self","staticStyle","_v","_s","headerAttrs","label","_t","staticRenderFns","name","props","data","type","Object","default","value","undefined","disabled","Boolean","components","style","attrs","watch","handler","flexGrow","flexShrink","flexBasis","marginTop","marginLeft","marginBottom","marginRight","paddingTop","paddingRight","paddingBottom","paddingLeft","backgroundColor","immediate","deep","created","methods","mixins","readonly","content","header","nextIsActive","computed","classes","groupClasses","isDisabled","expansionPanels","isReadonly","registerContent","unregisterContent","registerHeader","vm","unregisterHeader","onClick","e","toggle","isBooted","render","h","staticClass","class","String","baseMixins","isActive","expansionPanel","beforeDestroy","showLazyContent","directives","ripple","disableIconRotate","expandIcon","hideActions","hasMousedown","genIcon","icon","VIcon","setBackgroundColor","tabindex","on","click","mousedown","mouseup","open","provide","accordion","flat","hover","focusable","inset","popout","tile","$attrs","hasOwnProperty","Array","length","updateItem","getValue","item","nextValue","index","toggleMethod","component","VExpansionPanel","VExpansionPanelContent","VExpansionPanelHeader","VExpansionPanels"],"mappings":"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","file":"js/chunk-c7d1d80e.13f265fc.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"width\":\"100%\"}},[_c('v-expansion-panels',[_c('v-expansion-panel',[_c('v-expansion-panel-header',[_vm._v(_vm._s(_vm.headerAttrs.label))]),_c('v-expansion-panel-content',{staticStyle:{\"padding-top\":\"10px\"}},[_vm._t(\"default\")],2)],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <!-- <v-row justify=\"center\"> -->\r\n    <div style=\"width: 100%;\">\r\n    <v-expansion-panels >\r\n      <v-expansion-panel>\r\n        <v-expansion-panel-header>{{headerAttrs.label}}</v-expansion-panel-header>\r\n        <v-expansion-panel-content style=\"padding-top:10px;\">\r\n          <slot></slot>\r\n        </v-expansion-panel-content>\r\n      </v-expansion-panel>\r\n    </v-expansion-panels>\r\n    </div>\r\n  <!-- </v-row> -->\r\n</template>\r\n\r\n\r\n<script>\r\n\r\nexport default {\r\n  name: \"TExpansionPanel\",\r\n\r\n  props: {\r\n    data: {\r\n      type: Object,\r\n      default: () => {},\r\n    },\r\n    value: {\r\n      type: undefined,\r\n    },\r\n    disabled: {\r\n      type: [Boolean, undefined],\r\n      default: undefined,\r\n    },\r\n  },\r\n\r\n  components: {\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      style: {},\r\n      attrs: {},\r\n      headerAttrs: {}\r\n    };\r\n  },\r\n\r\n  watch: {\r\n    data: {\r\n      handler(data) {\r\n        this.headerAttrs = {\r\n          label: data.label\r\n        };\r\n        this.style = {\r\n          // width: \"100%\",\r\n          flexGrow: data.flexGrow,\r\n          flexShrink: data.flexShrink,\r\n          flexBasis: data.flexBasis,\r\n          marginTop: data.marginTop,\r\n          marginLeft: data.marginLeft,\r\n          marginBottom: data.marginBottom,\r\n          marginRight: data.marginRight,\r\n          // TODO: paddingAll\r\n          // padding: data.paddingAll,\r\n          paddingTop: data.paddingTop,\r\n          paddingRight: data.paddingRight,\r\n          paddingBottom: data.paddingBottom,\r\n          paddingLeft: data.paddingLeft,\r\n          backgroundColor: data.backgroundColor,\r\n        };\r\n        this.attrs = {\r\n          [data.layout]: true,\r\n          [data.alignItems]: true,\r\n          wrap: data.wrap,\r\n          [data.justifyContent]: true,\r\n          fillHeight: data.fillHeight,\r\n        };\r\n      },\r\n      immediate: true,\r\n      deep: true,\r\n    },\r\n  },\r\n\r\n  created() {\r\n  },\r\n\r\n  methods: {\r\n  },\r\n};\r\n</script>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TExpansionPanel.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TExpansionPanel.vue?vue&type=script&lang=js&\"","// Components\nimport VExpansionPanels from './VExpansionPanels'\nimport VExpansionPanelHeader from './VExpansionPanelHeader'\nimport VExpansionPanelContent from './VExpansionPanelContent'\n\n// Mixins\nimport { factory as GroupableFactory } from '../../mixins/groupable'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins from '../../util/mixins'\n\n// Types\nimport { VNode } from 'vue'\n\ntype VExpansionPanelHeaderInstance = InstanceType<typeof VExpansionPanelHeader>\ntype VExpansionPanelContentInstance = InstanceType<typeof VExpansionPanelContent>\n\nexport default mixins(\n  GroupableFactory<'expansionPanels', typeof VExpansionPanels>('expansionPanels', 'v-expansion-panel', 'v-expansion-panels'),\n  RegistrableProvide('expansionPanel', true)\n  /* @vue/component */\n).extend({\n  name: 'v-expansion-panel',\n\n  props: {\n    disabled: Boolean,\n    readonly: Boolean,\n  },\n\n  data () {\n    return {\n      content: null as VExpansionPanelContentInstance | null,\n      header: null as VExpansionPanelHeaderInstance | null,\n      nextIsActive: false,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-expansion-panel--active': this.isActive,\n        'v-expansion-panel--next-active': this.nextIsActive,\n        'v-expansion-panel--disabled': this.isDisabled,\n        ...this.groupClasses,\n      }\n    },\n    isDisabled (): boolean {\n      return this.expansionPanels.disabled || this.disabled\n    },\n    isReadonly (): boolean {\n      return this.expansionPanels.readonly || this.readonly\n    },\n  },\n\n  methods: {\n    registerContent (vm: VExpansionPanelContentInstance) {\n      this.content = vm\n    },\n    unregisterContent () {\n      this.content = null\n    },\n    registerHeader (vm: VExpansionPanelHeaderInstance) {\n      this.header = vm\n      vm.$on('click', this.onClick)\n    },\n    unregisterHeader () {\n      this.header = null\n    },\n    onClick (e: MouseEvent) {\n      if (e.detail) this.header!.$el.blur()\n\n      this.$emit('click', e)\n\n      this.isReadonly || this.isDisabled || this.toggle()\n    },\n    toggle () {\n      /* istanbul ignore else */\n      if (this.content) this.content.isBooted = true\n      this.$nextTick(() => this.$emit('change'))\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-expansion-panel',\n      class: this.classes,\n      attrs: {\n        'aria-expanded': String(this.isActive),\n      },\n    }, getSlot(this))\n  },\n})\n","// Components\nimport VExpansionPanel from './VExpansionPanel'\nimport { VExpandTransition } from '../transitions'\n\n// Mixins\nimport Bootable from '../../mixins/bootable'\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Bootable,\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-content', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-content',\n\n  computed: {\n    isActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerContent(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterContent()\n  },\n\n  render (h): VNode {\n    return h(VExpandTransition, this.showLazyContent(() => [\n      h('div', this.setBackgroundColor(this.color, {\n        staticClass: 'v-expansion-panel-content',\n        directives: [{\n          name: 'show',\n          value: this.isActive,\n        }],\n      }), [\n        h('div', { class: 'v-expansion-panel-content__wrap' }, getSlot(this)),\n      ]),\n    ]))\n  },\n})\n","// Components\nimport { VFadeTransition } from '../transitions'\nimport VExpansionPanel from './VExpansionPanel'\nimport VIcon from '../VIcon'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Directives\nimport ripple from '../../directives/ripple'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-header', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  $el: HTMLElement\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-header',\n\n  directives: { ripple },\n\n  props: {\n    disableIconRotate: Boolean,\n    expandIcon: {\n      type: String,\n      default: '$expand',\n    },\n    hideActions: Boolean,\n    ripple: {\n      type: [Boolean, Object],\n      default: false,\n    },\n  },\n\n  data: () => ({\n    hasMousedown: false,\n  }),\n\n  computed: {\n    classes (): object {\n      return {\n        'v-expansion-panel-header--active': this.isActive,\n        'v-expansion-panel-header--mousedown': this.hasMousedown,\n      }\n    },\n    isActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n    isDisabled (): boolean {\n      return this.expansionPanel.isDisabled\n    },\n    isReadonly (): boolean {\n      return this.expansionPanel.isReadonly\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerHeader(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterHeader()\n  },\n\n  methods: {\n    onClick (e: MouseEvent) {\n      this.$emit('click', e)\n    },\n    genIcon () {\n      const icon = getSlot(this, 'actions') ||\n        [this.$createElement(VIcon, this.expandIcon)]\n\n      return this.$createElement(VFadeTransition, [\n        this.$createElement('div', {\n          staticClass: 'v-expansion-panel-header__icon',\n          class: {\n            'v-expansion-panel-header__icon--disable-rotate': this.disableIconRotate,\n          },\n          directives: [{\n            name: 'show',\n            value: !this.isDisabled,\n          }],\n        }, icon),\n      ])\n    },\n  },\n\n  render (h): VNode {\n    return h('button', this.setBackgroundColor(this.color, {\n      staticClass: 'v-expansion-panel-header',\n      class: this.classes,\n      attrs: {\n        tabindex: this.isDisabled ? -1 : null,\n        type: 'button',\n        'aria-expanded': this.hasMousedown,\n      },\n      directives: [{\n        name: 'ripple',\n        value: this.ripple,\n      }],\n      on: {\n        ...this.$listeners,\n        click: this.onClick,\n        mousedown: () => (this.hasMousedown = true),\n        mouseup: () => (this.hasMousedown = false),\n      },\n    }), [\n      getSlot(this, 'default', { open: this.isActive }, true),\n      this.hideActions || this.genIcon(),\n    ])\n  },\n})\n","// Styles\nimport './VExpansionPanel.sass'\n\n// Components\nimport { BaseItemGroup, GroupableInstance } from '../VItemGroup/VItemGroup'\nimport VExpansionPanel from './VExpansionPanel'\n\n// Utilities\nimport { breaking } from '../../util/console'\n\n// Types\ninterface VExpansionPanelInstance extends InstanceType<typeof VExpansionPanel> {}\n\n/* @vue/component */\nexport default BaseItemGroup.extend({\n  name: 'v-expansion-panels',\n\n  provide (): object {\n    return {\n      expansionPanels: this,\n    }\n  },\n\n  props: {\n    accordion: Boolean,\n    disabled: Boolean,\n    flat: Boolean,\n    hover: Boolean,\n    focusable: Boolean,\n    inset: Boolean,\n    popout: Boolean,\n    readonly: Boolean,\n    tile: Boolean,\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...BaseItemGroup.options.computed.classes.call(this),\n        'v-expansion-panels': true,\n        'v-expansion-panels--accordion': this.accordion,\n        'v-expansion-panels--flat': this.flat,\n        'v-expansion-panels--hover': this.hover,\n        'v-expansion-panels--focusable': this.focusable,\n        'v-expansion-panels--inset': this.inset,\n        'v-expansion-panels--popout': this.popout,\n        'v-expansion-panels--tile': this.tile,\n      }\n    },\n  },\n\n  created () {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('expand')) {\n      breaking('expand', 'multiple', this)\n    }\n\n    /* istanbul ignore next */\n    if (\n      Array.isArray(this.value) &&\n      this.value.length > 0 &&\n      typeof this.value[0] === 'boolean'\n    ) {\n      breaking(':value=\"[true, false, true]\"', ':value=\"[0, 2]\"', this)\n    }\n  },\n\n  methods: {\n    updateItem (item: GroupableInstance & VExpansionPanelInstance, index: number) {\n      const value = this.getValue(item, index)\n      const nextValue = this.getValue(item, index + 1)\n\n      item.isActive = this.toggleMethod(value)\n      item.nextIsActive = this.toggleMethod(nextValue)\n    },\n  },\n})\n","import { render, staticRenderFns } from \"./TExpansionPanel.vue?vue&type=template&id=31390e81&\"\nimport script from \"./TExpansionPanel.vue?vue&type=script&lang=js&\"\nexport * from \"./TExpansionPanel.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VExpansionPanel } from 'vuetify/lib/components/VExpansionPanel';\nimport { VExpansionPanelContent } from 'vuetify/lib/components/VExpansionPanel';\nimport { VExpansionPanelHeader } from 'vuetify/lib/components/VExpansionPanel';\nimport { VExpansionPanels } from 'vuetify/lib/components/VExpansionPanel';\ninstallComponents(component, {VExpansionPanel,VExpansionPanelContent,VExpansionPanelHeader,VExpansionPanels})\n"],"sourceRoot":""}