{"version":3,"sources":["webpack:///./src/components/template/TMultiSelect.vue?417d","webpack:///src/components/template/TMultiSelect.vue","webpack:///./src/components/template/TMultiSelect.vue?c0e7","webpack:///./src/components/template/TMultiSelect.vue","webpack:///../../../src/components/VAutocomplete/VAutocomplete.ts"],"names":["render","_vm","this","_h","$createElement","_c","_self","style","on","e","stopPropagation","_b","model","value","callback","$$v","innerValue","expression","comboboxAttrs","staticRenderFns","name","props","data","type","Object","default","undefined","formDisabled","Boolean","watch","disabled","handler","flexShrink","shrink","flexGrow","grow","width","backgroundColor","marginTop","marginLeft","marginBottom","marginRight","dense","immediate","deep","newValue","$emit","created","component","VAutocomplete","VFlex","defaultMenuProps","offsetY","offsetOverflow","transition","allowOverflow","autoSelectFirst","filter","itemText","queryText","hideNoData","menuProps","noFilter","searchInput","String","lazySearch","computed","classes","selectedIndex","computedItems","selectedValues","selectedItems","map","item","hasDisplayedItems","hideSelected","filteredItems","some","length","currentRange","selectedItem","getText","internalSearch","allItems","text","get","set","isAnyValueAllowed","isDirty","searchIsDirty","isSearching","multiple","menuCanShow","$_menuProps","find","i","listData","items","internalValue","isFocused","document","$refs","input","isMenuActive","val","oldVal","activateMenu","destroyed","methods","onFilteredItemsChanged","onInternalSearchChanged","updateMenuDimensions","menu","changeSelectedIndex","keyCode","deleteCurrentItem","curIndex","curItem","getDisabled","lastIndex","nextIndex","nextItem","clearableCallback","genInput","attrs","autocomplete","domProps","genInputSlot","slot","genSelections","hasSlot","onClick","isAppendInner","onInput","target","onKeyDown","onSpaceDown","onTabDown","onUpDown","selectItem","setSelectedItems","setSearch","updateSelf","valueComparator","getValue","hasItem","indexOf","onCopy","currentItem","currentItemText","event"],"mappings":"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","file":"js/chunk-ee146a0c.a4b3d7f7.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-flex',{style:(_vm.style),on:{\"click\":function (e){ return e.stopPropagation(); }}},[_c('v-autocomplete',_vm._b({model:{value:(_vm.innerValue),callback:function ($$v) {_vm.innerValue=$$v},expression:\"innerValue\"}},'v-autocomplete',_vm.comboboxAttrs,false))],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <v-flex :style=\"style\" @click=\"(e)=>e.stopPropagation()\">\r\n    <v-autocomplete\r\n      v-model=\"innerValue\"\r\n      v-bind=\"comboboxAttrs\"\r\n    ></v-autocomplete>\r\n  </v-flex>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"TMultiSelect\",\r\n\r\n  props: {\r\n    data: {\r\n      type: Object,\r\n      default: () => {},\r\n    },\r\n    value: {\r\n      type: undefined,\r\n    },\r\n    formDisabled: {\r\n      type: [Boolean, undefined],\r\n      default: undefined,\r\n    },\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      style: {},\r\n      comboboxAttrs: {},\r\n      innerValue: [],\r\n    };\r\n  },\r\n\r\n  watch: {\r\n    formDisabled(disabled) {\r\n      this.comboboxAttrs.disabled = disabled;\r\n    },\r\n    data: {\r\n      handler(data) {\r\n        this.style = {\r\n          flexShrink: data.shrink,\r\n          flexGrow: data.grow,\r\n          width: data.width,\r\n          backgroundColor: data.backgroundColor,\r\n          marginTop: data.marginTop,\r\n          marginLeft: data.marginLeft,\r\n          marginBottom: data.marginBottom,\r\n          marginRight: data.marginRight,\r\n        };\r\n\r\n        this.comboboxAttrs = {\r\n          dense: data.dense,\r\n          [data.style]: true,\r\n          items: data.options,\r\n          multiple: true,\r\n          hideDetails: true,\r\n          disabled: this.formDisabled ?? data.disabled,\r\n          // chips: true,\r\n          // smallChips: true,\r\n        };\r\n      },\r\n      immediate: true,\r\n      deep: true,\r\n    },\r\n    value(newValue) {\r\n      this.innerValue = newValue;\r\n    },\r\n    innerValue(newValue) {\r\n      this.$emit(\"input\", newValue);\r\n    },\r\n  },\r\n\r\n  created() {\r\n    this.innerValue = this.value;\r\n  },\r\n};\r\n</script>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TMultiSelect.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TMultiSelect.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TMultiSelect.vue?vue&type=template&id=6ed8d088&\"\nimport script from \"./TMultiSelect.vue?vue&type=script&lang=js&\"\nexport * from \"./TMultiSelect.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VAutocomplete } from 'vuetify/lib/components/VAutocomplete';\nimport { VFlex } from 'vuetify/lib/components/VGrid';\ninstallComponents(component, {VAutocomplete,VFlex})\n","// Styles\nimport './VAutocomplete.sass'\n\n// Extensions\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect'\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mergeData from '../../util/mergeData'\nimport {\n  getObjectValueByPath,\n  getPropertyFromItem,\n  keyCodes,\n} from '../../util/helpers'\n\n// Types\nimport { PropType, VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nconst defaultMenuProps = {\n  ...VSelectMenuProps,\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false,\n}\n\n/* @vue/component */\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true,\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false,\n    },\n    filter: {\n      type: Function,\n      default: (item: any, queryText: string, itemText: string) => {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1\n      },\n    } as PropValidator<(item: any, queryText: string, itemText: string) => boolean>,\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: () => defaultMenuProps,\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String as PropType<string | null>,\n    },\n  },\n\n  data () {\n    return {\n      lazySearch: this.searchInput,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSelect.options.computed.classes.call(this),\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1,\n      }\n    },\n    computedItems (): object[] {\n      return this.filteredItems\n    },\n    selectedValues (): object[] {\n      return this.selectedItems.map(item => this.getValue(item))\n    },\n    hasDisplayedItems (): boolean {\n      return this.hideSelected\n        ? this.filteredItems.some(item => !this.hasItem(item))\n        : this.filteredItems.length > 0\n    },\n    currentRange (): number {\n      if (this.selectedItem == null) return 0\n\n      return String(this.getText(this.selectedItem)).length\n    },\n    filteredItems (): object[] {\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems\n\n      return this.allItems.filter(item => {\n        const value = getPropertyFromItem(item, this.itemText)\n        const text = value != null ? String(value) : ''\n\n        return this.filter(item, String(this.internalSearch), text)\n      })\n    },\n    internalSearch: {\n      get (): string | null {\n        return this.lazySearch\n      },\n      set (val: any) { // TODO: this should be `string | null` but it breaks lots of other types\n        // emit update event only when the new\n        // search value is different from previous\n        if (this.lazySearch !== val) {\n          this.lazySearch = val\n          this.$emit('update:search-input', val)\n        }\n      },\n    },\n    isAnyValueAllowed (): boolean {\n      return false\n    },\n    isDirty (): boolean {\n      return this.searchIsDirty || this.selectedItems.length > 0\n    },\n    isSearching (): boolean {\n      return (\n        this.multiple &&\n        this.searchIsDirty\n      ) || (\n        this.searchIsDirty &&\n        this.internalSearch !== this.getText(this.selectedItem)\n      )\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems || !this.hideNoData\n    },\n    $_menuProps (): object {\n      const props = VSelect.options.computed.$_menuProps.call(this);\n      (props as any).contentClass = `v-autocomplete__content ${(props as any).contentClass || ''}`.trim()\n      return {\n        ...defaultMenuProps,\n        ...props,\n      }\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null &&\n        this.internalSearch !== ''\n    },\n    selectedItem (): any {\n      if (this.multiple) return null\n\n      return this.selectedItems.find(i => {\n        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue))\n      })\n    },\n    listData () {\n      const data = VSelect.options.computed.listData.call(this) as any\n\n      data.props = {\n        ...data.props,\n        items: this.virtualizedItems,\n        noFilter: (\n          this.noFilter ||\n          !this.isSearching ||\n          !this.filteredItems.length\n        ),\n        searchInput: this.internalSearch,\n      }\n\n      return data\n    },\n  },\n\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused (val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.select()\n      } else {\n        document.removeEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.blur()\n        this.updateSelf()\n      }\n    },\n    isMenuActive (val) {\n      if (val || !this.hasSlot) return\n\n      this.lazySearch = null\n    },\n    items (val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (\n        !(oldVal && oldVal.length) &&\n        this.hideNoData &&\n        this.isFocused &&\n        !this.isMenuActive &&\n        val.length\n      ) this.activateMenu()\n    },\n    searchInput (val: string) {\n      this.lazySearch = val\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf',\n  },\n\n  created () {\n    this.setSearch()\n  },\n\n  destroyed () {\n    document.removeEventListener('copy', this.onCopy)\n  },\n\n  methods: {\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return\n\n      this.setMenuIndex(-1)\n\n      this.$nextTick(() => {\n        if (\n          !this.internalSearch ||\n          (val.length !== 1 &&\n            !this.autoSelectFirst)\n        ) return\n\n        this.$refs.menu.getTiles()\n        this.setMenuIndex(0)\n      })\n    },\n    onInternalSearchChanged () {\n      this.updateMenuDimensions()\n    },\n    updateMenuDimensions () {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions()\n    },\n    changeSelectedIndex (keyCode: number) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1\n        } else {\n          this.selectedIndex--\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1\n        } else {\n          this.selectedIndex++\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem()\n      }\n    },\n    deleteCurrentItem () {\n      const curIndex = this.selectedIndex\n      const curItem = this.selectedItems[curIndex]\n\n      // Do nothing if input or item is disabled\n      if (\n        !this.isInteractive ||\n        this.getDisabled(curItem)\n      ) return\n\n      const lastIndex = this.selectedItems.length - 1\n\n      // Select the last item if\n      // there is no selection\n      if (\n        this.selectedIndex === -1 &&\n        lastIndex !== 0\n      ) {\n        this.selectedIndex = lastIndex\n\n        return\n      }\n\n      const length = this.selectedItems.length\n      const nextIndex = curIndex !== length - 1\n        ? curIndex\n        : curIndex - 1\n      const nextItem = this.selectedItems[nextIndex]\n\n      if (!nextItem) {\n        this.setValue(this.multiple ? [] : null)\n      } else {\n        this.selectItem(curItem)\n      }\n\n      this.selectedIndex = nextIndex\n    },\n    clearableCallback () {\n      this.internalSearch = null\n\n      VSelect.options.methods.clearableCallback.call(this)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = mergeData(input.data!, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data!, 'attrs.autocomplete', 'off'),\n        },\n        domProps: { value: this.internalSearch },\n      })\n\n      return input\n    },\n    genInputSlot () {\n      const slot = VSelect.options.methods.genInputSlot.call(this)\n\n      slot.data!.attrs!.role = 'combobox'\n\n      return slot\n    },\n    genSelections (): VNode | never[] {\n      return this.hasSlot || this.multiple\n        ? VSelect.options.methods.genSelections.call(this)\n        : []\n    },\n    onClick (e: MouseEvent) {\n      if (!this.isInteractive) return\n\n      this.selectedIndex > -1\n        ? (this.selectedIndex = -1)\n        : this.onFocus()\n\n      if (!this.isAppendInner(e.target)) this.activateMenu()\n    },\n    onInput (e: Event) {\n      if (\n        this.selectedIndex > -1 ||\n        !e.target\n      ) return\n\n      const target = e.target as HTMLInputElement\n      const value = target.value\n\n      // If typing and menu is not currently active\n      if (target.value) this.activateMenu()\n\n      this.internalSearch = value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onSpaceDown (e: KeyboardEvent) { /* noop */ },\n    onTabDown (e: KeyboardEvent) {\n      VSelect.options.methods.onTabDown.call(this, e)\n      this.updateSelf()\n    },\n    onUpDown (e: Event) {\n      // Prevent screen from scrolling\n      e.preventDefault()\n\n      // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n      this.activateMenu()\n    },\n    selectItem (item: object) {\n      VSelect.options.methods.selectItem.call(this, item)\n      this.setSearch()\n    },\n    setSelectedItems () {\n      VSelect.options.methods.setSelectedItems.call(this)\n\n      // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n      if (!this.isFocused) this.setSearch()\n    },\n    setSearch () {\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(() => {\n        if (\n          !this.multiple ||\n          !this.internalSearch ||\n          !this.isMenuActive\n        ) {\n          this.internalSearch = (\n            !this.selectedItems.length ||\n            this.multiple ||\n            this.hasSlot\n          )\n            ? null\n            : this.getText(this.selectedItem)\n        }\n      })\n    },\n    updateSelf () {\n      if (!this.searchIsDirty &&\n        !this.internalValue\n      ) return\n\n      if (!this.valueComparator(\n        this.internalSearch,\n        this.getValue(this.internalValue)\n      )) {\n        this.setSearch()\n      }\n    },\n    hasItem (item: any): boolean {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1\n    },\n    onCopy (event: ClipboardEvent) {\n      if (this.selectedIndex === -1) return\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n      const currentItemText = this.getText(currentItem)\n      event.clipboardData?.setData('text/plain', currentItemText)\n      event.clipboardData?.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText)\n      event.preventDefault()\n    },\n  },\n})\n"],"sourceRoot":""}